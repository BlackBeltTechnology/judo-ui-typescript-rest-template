{{> fragment.header.hbs }}

import type { JudoIdentifiable } from '../data-api/common';
import { CommandQueryCustomizer } from '../data-api/common';
import { X_JUDO_SIGNED_IDENTIFIER, X_JUDO_MASK } from '../data-api/rest/headers';
import { JudoAxiosService } from './JudoAxiosService';
import type { JudoRestResponse } from '../data-api/rest/requestResponse';
{{# each (joinedTokensForApiImport relation) as |imp| }}
    import type { {{ imp }}, {{ imp }}Stored } from '../data-api/model/{{ imp }}';
    import type { {{ imp }}QueryCustomizer } from '../data-api/rest/{{ imp }}QueryCustomizer';
    import { serialize{{ imp }}QueryCustomizer } from '../data-api/rest/{{ imp }}QueryCustomizerSerializer';
    import { {{ imp }}Serializer, {{ imp }}StoredSerializer } from '../data-api/rest/{{ imp }}Serializer';
{{/ each }}
import type { {{ serviceRelationName relation }} } from '../data-service';

const DEFAULT_COMMAND_MASK = '{}';

/**
 * Relation Service Implementation for {{ classDataName (getRelationOwnerAsClassType relation) "" }}.{{ relation.name }}
 */
export class {{ serviceRelationName relation }}Impl extends JudoAxiosService implements {{ serviceRelationName relation }} {
{{# each (joinedTokensForApiImport relation) as |imp| }}
private readonly {{ firstToLower imp }}Serializer = {{ imp }}Serializer.getInstance();
private readonly {{ firstToLower imp }}StoredSerializer = {{ imp }}StoredSerializer.getInstance();
{{/ each }}

{{# if relation.isListable }}
  {{# if relation.isCollection }}
  /**
   * From: relation.isListable, relation.isCollection
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   */
  async list(owner?: {{# if relation.isAccess }}JudoIdentifiable<any>{{ else }}{{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}{{/ if }}, queryCustomizer?: {{ classDataName relation.target "QueryCustomizer" }}, headers?: Record<string, string>): Promise<JudoRestResponse<Array<{{ classDataName relation.target "Stored" }}>>> {
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/"  relation.name "/~list" }}';
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), serialize{{ classDataName relation.target "QueryCustomizer" }}(queryCustomizer) ?? {}, owner ? {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
        ...(headers ?? {}),
      },
    } : (headers ? { headers } : undefined));
    return {
      ...rest,
      data: Array.isArray(data) ? data.map(d => this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.deserialize(d)) : [],
    };
  }
  {{/ if }}
{{/ if }}

{{# and relation.isExportable relation.isCollection }}
    /**
    * From: relation.isExportable, relation.isCollection
    * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
    */
    async export(owner?: {{# if relation.isAccess }}JudoIdentifiable<any>{{ else }}{{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}{{/ if }}, queryCustomizer?: {{ classDataName relation.target "QueryCustomizer" }}): Promise<any> {
        const path = '{{ restPath (getRelationOwnerAsClassType relation) "/"  relation.name "/~export" }}';
        const response = await this.axios.post(this.getPathForActor(path), serialize{{ classDataName relation.target "QueryCustomizer" }}(queryCustomizer) ?? {}, {
            responseType: 'blob',
            headers: owner ? {
                'X-Judo-SignedIdentifier': owner.__signedIdentifier
            } : undefined,
        });

        return response;
    }
{{/ and }}

{{# if relation.isRefreshable }}
  {{# if relation.isAccess }}
  {{# unless relation.isCollection }}
  /**
   * From: relation.isAccess, !relation.isCollection
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   */
  async refreshFor{{ firstToUpper relation.name }}(queryCustomizer?: {{ classDataName relation.target "QueryCustomizer" }}, headers?: Record<string, string>): Promise<JudoRestResponse<{{ classDataName relation.target "Stored" }}>> {
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/" relation.name "/~get" }}';
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), serialize{{ classDataName relation.target "QueryCustomizer" }}(queryCustomizer) ?? {}, headers ? { headers } : undefined);
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.deserialize(data),
    };
  }
  {{/ unless }}
  {{/ if }}

  /**
   * From: relation.isRefreshable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   */
  async refresh(owner?: {{# if relation.isAccess }}JudoIdentifiable<any>{{ else }}{{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}{{/ if }}, queryCustomizer?: {{ classDataName relation.target "QueryCustomizer" }}, headers?: Record<string, string>): Promise<JudoRestResponse<{{ classDataName relation.target "Stored" }}>> {
    const path = '{{ restPath relation.target "/~get" "" "" }}';
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), serialize{{ classDataName relation.target "QueryCustomizer" }}(queryCustomizer) ?? {}, owner ? {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
        ...(headers ?? {}),
      },
    } : (headers ? { headers } : undefined));
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.deserialize(data),
    }
  }
{{/ if }}

{{# if relation.isRangeable }}
  /**
   * From: relation.isRangeable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   */
  async getRangeFor{{ firstToUpper relation.name }}({{# unless relation.isAccess }}owner: {{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}, {{/ unless }}queryCustomizer?: {{ classDataName relation.target "QueryCustomizer" }}, headers?: Record<string, string>): Promise<JudoRestResponse<Array<{{ classDataName relation.target "Stored" }}>>> {
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/" relation.name "/~range" }}';
    {{# unless relation.isAccess }}
    const input = this.{{ firstToLower (classDataName (getRelationOwnerAsClassType relation) "StoredSerializer") }}.serialize(owner, true);
    {{/ unless }}
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), {
      {{# unless relation.isAccess }}owner: input,{{/ unless }}
      queryCustomizer: serialize{{ classDataName relation.target "QueryCustomizer" }}(queryCustomizer) ?? {}
    }, headers ? { headers } : undefined);
    return {
      ...rest,
      data: Array.isArray(data) ? data.map(d => this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.deserialize(d)) : [],
    };
  }
{{/ if }}

{{# if relation.target.isTemplateable }}
  /**
   * From: relation.target.isTemplateable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   */
  async getTemplate(): Promise<JudoRestResponse<{{ classDataName relation.target "" }}>> {
    const path = '{{ restPath relation.target "/~template" "" "" }}';
    const { data, ...rest } = await this.axios.get(this.getPathForActor(path));
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName relation.target "Serializer") }}.deserialize(data),
    };
  }
{{/ if }}

{{# if relation.isCreatable }}
  /**
   * From: relation.isCreatable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async create({{# unless relation.isAccess }}owner: {{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}, {{/ unless }}target: {{ classDataName relation.target "" }}, queryCustomizer?: CommandQueryCustomizer): Promise<JudoRestResponse<{{ classDataName relation.target "Stored" }}>> {
    {{# unless relation.isAccess }}
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/~update/"  relation.name "/~create" }}';
    {{ else }}
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/" relation.name "/~create" }}';
    {{/ unless }}
    const input = this.{{ firstToLower (classDataName relation.target "Serializer") }}.serialize(target, true);
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), input, {
      headers: {
        {{# unless relation.isAccess }}
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
        {{/ unless }}
        [X_JUDO_MASK]: queryCustomizer?._mask ?? DEFAULT_COMMAND_MASK,
      },
    });
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.deserialize(data),
    };
  }
{{/ if }}

{{# if relation.isCreateValidatable }}
  /**
   * From: relation.validateCreate
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async validateCreate({{# unless relation.isAccess }}owner: {{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}, {{/ unless }}target: {{ classDataName relation.target "" }}): Promise<JudoRestResponse<{{ classDataName relation.target "" }}>> {
    {{# unless relation.isAccess }}
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/~update/"  relation.name "/~validate" }}';
    {{ else }}
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/" relation.name "/~validate" }}';
    {{/ unless }}
    const input = this.{{ firstToLower (classDataName relation.target "Serializer") }}.serialize(target, true);
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), input, {
      headers: {
        {{# unless relation.isAccess }}
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
        {{/ unless }}
      },
    });
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName relation.target "Serializer") }}.deserialize(data),
    };
  }
{{/ if }}

{{# if relation.isDeletable }}
  /**
   * From: relation.isDeletable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async delete(target: {{ classDataName relation.target "Stored" }}): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath relation.target "/~delete" "" "" }}';
    return this.axios.post(this.getPathForActor(path), undefined, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: target.__signedIdentifier,
      },
    });
  }
{{/ if }}

{{# if relation.isUpdatable }}
  /**
   * From: relation.isUpdatable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async update(target: {{ classDataName relation.target "Stored" }}, queryCustomizer?: CommandQueryCustomizer): Promise<JudoRestResponse<{{ classDataName relation.target "Stored" }}>> {
    const path = '{{ restPath relation.target "/~update" "" "" }}';
    const input = this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.serialize(target, true);
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), input, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: input.__signedIdentifier,
        [X_JUDO_MASK]: queryCustomizer?._mask ?? DEFAULT_COMMAND_MASK,
      },
    });
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.deserialize(data),
    };
  }
{{/ if }}

{{# if relation.isUpdateValidatable }}
  /**
   * From: relation.validateUpdate
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async validateUpdate({{# unless relation.isAccess }}owner: {{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}, {{/ unless }}target: {{ classDataName relation.target "Stored" }}): Promise<JudoRestResponse<{{ classDataName relation.target "Stored" }}>> {
    const path = '{{ restPath relation.target "/~validate" "" "" }}';
    const input = this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.serialize(target, true);
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), input, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: target.__signedIdentifier,
      },
    });
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.deserialize(data),
    };
  }
{{/ if }}

{{# if relation.isSetable }}
  /**
   * From: relation.isSetable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async set{{ firstToUpper relation.name }}({{# unless relation.isAccess }}owner: {{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}, {{/ unless }}selected:{{# if relation.isCollection }}Array<{{/ if }}{{ classDataName relation.target "Stored" }}{{# if relation.isCollection }}>{{/ if }}): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/~update/" relation.name "/~set" }}';
    {{# if relation.isCollection }}
    const input = selected.map(s => this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.serialize(s, true));
    {{ else }}
    const input = this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.serialize(selected, true);
    {{/ if }}
    return this.axios.post(this.getPathForActor(path), input{{# unless relation.isAccess }}, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier!,
      },
    } {{/ unless }});
  }
{{/ if }}

{{# if relation.isUnsetable }}
  /**
   * From: relation.isUnsetable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async unset{{ firstToUpper relation.name }}({{# unless relation.isAccess }}owner: {{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}, {{/ unless }}): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/~update/" relation.name "/~unset" }}';
    return this.axios.post(this.getPathForActor(path), undefined{{# unless relation.isAccess }}, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier!,
      },
    } {{/ unless }});
  }
{{/ if }}

{{# if relation.isAddable }}
  /**
   * From: relation.isAddable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async add{{ firstToUpper relation.name }}({{# unless relation.isAccess }}owner: {{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}, {{/ unless }}selected: Array<{{ classDataName relation.target "Stored" }}>): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/~update/" relation.name "/~add" }}';
    const input = selected.map(s => this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.serialize(s, true));
    return this.axios.post(this.getPathForActor(path), input{{# unless relation.isAccess }}, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier!,
      },
    } {{/ unless }});
  }
{{/ if }}

{{# if relation.isRemovable }}
  /**
   * From: relation.isRemovable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async remove{{ firstToUpper relation.name }}({{# unless relation.isAccess }}owner: {{ classDataName (getRelationOwnerAsClassType relation) "Stored" }}, {{/ unless }}selected: Array<{{ classDataName relation.target "Stored" }}>): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath (getRelationOwnerAsClassType relation) "/~update/" relation.name "/~remove" }}';
    const input = selected.map(s => this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.serialize(s, true));
    return this.axios.post(this.getPathForActor(path), selected{{# unless relation.isAccess }}, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier!,
      },
    } {{/ unless }});
  }
{{/ if }}

{{# each relation.target.relations as | targetRelation | }}
  {{# if targetRelation.isListable }}
  {{# if targetRelation.isCollection }}
  async list{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, queryCustomizer?: {{ classDataName targetRelation.target "QueryCustomizer" }}, headers?: Record<string, string>): Promise<JudoRestResponse<Array<{{ classDataName targetRelation.target "Stored" }}>>> {
    const path = '{{ restPath relation.target "/"  targetRelation.name "/~list" }}';
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), serialize{{ classDataName targetRelation.target "QueryCustomizer" }}(queryCustomizer) ?? {}, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
        ...(headers ?? {}),
      },
    });
    return {
      ...rest,
      data: Array.isArray(data) ? data.map(d => this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.deserialize(d)) : [],
    };
  }
  {{ else }}
  async get{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, queryCustomizer?: {{ classDataName targetRelation.target "QueryCustomizer" }}): Promise<JudoRestResponse<{{ classDataName targetRelation.target "Stored" }} | null>> {
    const path = '{{ restPath relation.target "/" targetRelation.name "/~get" }}';
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), serialize{{ classDataName targetRelation.target "QueryCustomizer" }}(queryCustomizer) ?? {}, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
      },
    });
    return {
      ...rest,
      data: (typeof data === 'string' && !data.length) ? null : this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.deserialize(data),
    };
  }
  {{/ if }}
  {{/ if }}


{{# and targetRelation.isExportable targetRelation.isCollection }}
    /**
     * From: relation.isExportable, relation.isCollection
     * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
     */
    async export{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, queryCustomizer?: {{ classDataName targetRelation.target "QueryCustomizer" }}): Promise<any> {
        const path = '{{ restPath relation.target "/"  targetRelation.name "/~export" }}';
        const response = await this.axios.post(this.getPathForActor(path), serialize{{ classDataName targetRelation.target "QueryCustomizer" }}(queryCustomizer) ?? {}, {
            responseType: 'blob',
            headers: {
                'X-Judo-SignedIdentifier': owner.__signedIdentifier,
            },
        });

        return response;
    }
{{/ and }}

  {{# if targetRelation.isRangeable }}
  {{# neq relation.name targetRelation.name }}
  /**
   * Form: targetRelation.isRangeable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   */
  async getRangeFor{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, queryCustomizer?: {{ classDataName targetRelation.target "QueryCustomizer" }}, headers?: Record<string, string>): Promise<JudoRestResponse<Array<{{ classDataName targetRelation.target "Stored" }}>>> {
    const path = '{{ restPath relation.target "/" targetRelation.name "/~range" }}';
    const input = this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.serialize(owner, true);
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), {
      owner: input,
      queryCustomizer: serialize{{ classDataName targetRelation.target "QueryCustomizer" }}(queryCustomizer) ?? {}
    }, headers ? { headers } : undefined);
    return {
      ...rest,
      data: Array.isArray(data) ? data.map(d => this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.deserialize(d)) : [],
    }
  }
  {{/ neq }}
  {{/ if }}

  {{# if targetRelation.target.isTemplateable }}
  async getTemplateFor{{ firstToUpper targetRelation.name }}(): Promise<JudoRestResponse<{{ classDataName targetRelation.target "" }}>> {
    const path = '{{ restPath targetRelation.target "/~template" "" "" }}';
    const { data, ...rest } = await this.axios.get(this.getPathForActor(path));
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName targetRelation.target "Serializer") }}.deserialize(data),
    };
  }
  {{/ if }}

  {{# if targetRelation.isCreatable }}
  async create{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, target: {{ classDataName targetRelation.target "" }}, queryCustomizer?: CommandQueryCustomizer): Promise<JudoRestResponse<{{ classDataName targetRelation.target "Stored" }}>> {
    const path = '{{ restPath relation.target "/~update/"  targetRelation.name "/~create" }}';
    const input = this.{{ firstToLower (classDataName targetRelation.target "Serializer") }}.serialize(target, true);
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), input, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
        [X_JUDO_MASK]: queryCustomizer?._mask ?? DEFAULT_COMMAND_MASK,
      },
    });
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.deserialize(data),
    };
  }
  {{/ if }}

  {{# if targetRelation.isCreateValidatable }}
  async validateCreate{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, target: {{ classDataName targetRelation.target "" }}): Promise<JudoRestResponse<{{ classDataName targetRelation.target "" }}>> {
    const path = '{{ restPath relation.target "/~update/"  targetRelation.name "/~validate" }}';
    const input = this.{{ firstToLower (classDataName targetRelation.target "Serializer") }}.serialize(target, true);
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), input, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
      },
    });
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName targetRelation.target "Serializer") }}.deserialize(data),
    };
  }
  {{/ if }}

  {{# if targetRelation.isDeletable }}
  async delete{{ firstToUpper targetRelation.name }}(target: {{ classDataName targetRelation.target "Stored" }}): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath targetRelation.target "/~delete" "" "" }}';
    return this.axios.post(this.getPathForActor(path), undefined, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: target.__signedIdentifier,
      },
    });
  }
  {{/ if }}

  {{# if targetRelation.isUpdatable }}
  async update{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, target: {{ classDataName targetRelation.target "Stored" }}, queryCustomizer?: CommandQueryCustomizer): Promise<JudoRestResponse<{{ classDataName targetRelation.target "Stored" }}>> {
    const path = '{{ restPath relation.target "/~update/"  targetRelation.name "/~update" }}';
    const input = this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.serialize(target, true);
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), input, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
        [X_JUDO_MASK]: queryCustomizer?._mask ?? DEFAULT_COMMAND_MASK,
      },
    });
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.deserialize(data),
    };
  }
  {{/ if }}

  {{# if targetRelation.isUpdateValidatable }}
  async validateUpdate{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, target: {{ classDataName targetRelation.target "Stored" }}): Promise<JudoRestResponse<{{ classDataName targetRelation.target "Stored" }}>> {
    const path = '{{ restPath relation.target "/~update/"  targetRelation.name "/~validate" }}';
    const input = this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.serialize(target, true);
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), input, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
      },
    });
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.deserialize(data),
    };
  }
  {{/ if }}

  {{# if targetRelation.isSetable }}
  {{# neq relation.name targetRelation.name }}
  /**
   * From: targetRelation.isSetable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async set{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, selected: {{# if targetRelation.isCollection }}Array<{{/ if }}{{ classDataName targetRelation.target "Stored" }}{{# if targetRelation.isCollection}}>{{/ if }}): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath relation.target "/~update/"  targetRelation.name "/~set" }}';
    {{# if targetRelation.isCollection }}
    const input = selected.map(s => this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.serialize(s, true));
    {{ else }}
    const input = this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.serialize(selected, true);
    {{/ if }}
    return this.axios.post(this.getPathForActor(path), input, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
      },
    });
  }
  {{/ neq }}
  {{/ if }}

  {{# if targetRelation.isUnsetable }}
  {{# neq relation.name targetRelation.name }}
  /**
   * From: targetRelation.isUnsetable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async unset{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath relation.target "/~update/"  targetRelation.name "/~unset" }}';
    return this.axios.post(this.getPathForActor(path), undefined, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
      },
    });
  }
  {{/ neq }}
  {{/ if }}

  {{# if targetRelation.isAddable }}
  {{# neq relation.name targetRelation.name }}
  /**
   * From: targetRelation.isAddable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async add{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, selected: Array<{{ classDataName targetRelation.target "Stored" }}>): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath relation.target "/~update/"  targetRelation.name "/~add" }}';
    const input = selected.map(s => this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.serialize(s, true));
    return this.axios.post(this.getPathForActor(path), input, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
      },
    });
  }
  {{/ neq }}
  {{/ if }}

  {{# if targetRelation.isRemovable }}
  {{# neq relation.name targetRelation.name }}
  /**
   * From: targetRelation.isRemovable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async remove{{ firstToUpper targetRelation.name }}(owner: {{ classDataName relation.target "Stored" }}, selected: Array<{{ classDataName targetRelation.target "Stored" }}>): Promise<JudoRestResponse<void>> {
    const path = '{{ restPath relation.target "/~update/"  targetRelation.name "/~remove" }}';
    const input = selected.map(s => this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.serialize(s, true));
    return this.axios.post(this.getPathForActor(path), input, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier,
      },
    });
  }
  {{/ neq }}
  {{/ if }}

  {{# each targetRelation.target.operations as | operation | }}
  /**
   * From: targetRelation.target.operations
   * @throws {AxiosError}{{# if (hasFaults operation) }}With data containing {@link{{ faultContainerName operation }} } for business related errors (status code is 422).{{/ if }}
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async {{ operation.name }}For{{ firstToUpper targetRelation.name }}({{# unless operation.isStatic }}owner: {{ classDataName targetRelation.target "Stored" }}{{/ unless }}{{# if operation.input }}{{# unless operation.isStatic }}, {{/ unless }}target:{{ classDataName operation.input.target  "" }}{{/ if }}): Promise<JudoRestResponse<{{# if operation.output }}{{ classDataName operation.output.target "Stored" }}{{ else }}void{{/ if }}>> {
    const path = '{{ operationRestPath targetRelation.target operation '' }}';
    {{# if operation.input }}
    const input = target ? this.{{ firstToLower (classDataName operation.input.target "Serializer") }}.serialize(target, true) : null;
    {{/ if }}
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path){{# if operation.input }}, input{{ else }}, undefined{{/ if }}{{# unless operation.isStatic }}, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier!,
      },
    } {{/ unless }});
    {{# if operation.output }}
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName operation.output.target "StoredSerializer") }}.deserialize(data),
    }
    {{ else }}
    return { data, ...rest };
    {{/ if }}
  }

  {{# if operation.input }}
  {{# if operation.input.target.isTemplateable }}
  async getTemplateOn{{ firstToUpper operation.name }}For{{ firstToUpper targetRelation.name }}(): Promise<JudoRestResponse<{{ classDataName operation.input.target "" }}>> {
    const path = '{{ restPath operation.input.target "/~template" "" "" }}';
    const { data, ...rest } = await this.axios.get(this.getPathForActor(path));
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName operation.input.target "Serializer") }}.deserialize(data),
    };
  }
  {{/ if }}
  {{/ if }}

  {{# if operation.isInputRangeable }}
  {{# neq relation.name targetRelation.name }}
  /**
   * From: targetRelation.target.operations operation.isInputRangeable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   */
  async getRangeOn{{ firstToUpper operation.name }}For{{ firstToUpper targetRelation.name }}({{# unless operation.isStatic }}owner: {{ classDataName targetRelation.target "Stored" }}, {{/ unless }}queryCustomizer?:{{ classDataName operation.input.target "QueryCustomizer" }}, headers?: Record<string, string>): Promise<JudoRestResponse<Array<{{ classDataName operation.input.target "Stored" }}>>> {
    const path = '{{ operationRestPath targetRelation.target operation '/~range' }}';
    {{# unless operation.isStatic }}
    const input = this.{{ firstToLower (classDataName targetRelation.target "StoredSerializer") }}.serialize(owner, true);
    {{/ unless }}
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), {
      {{# unless operation.isStatic }}owner: input,{{/ unless }}
      queryCustomizer: serialize{{ classDataName operation.input.target "QueryCustomizer" }}(queryCustomizer) ?? {}
    }, headers ? { headers } : undefined);
    return {
      ...rest,
      data: Array.isArray(data) ? data.map(d => this.{{ firstToLower (classDataName operation.input.target "StoredSerializer") }}.deserialize(d)) : [],
    };
  }
  {{/ neq }}
  {{/ if }}
  {{/ each }}
{{/ each }}

{{# each relation.target.operations as | operation | }}
  /**
   * From: relation.target.operations
   * @throws {AxiosError}{{# if (hasFaults operation) }}With data containing {@link{{ faultContainerName operation }} } for business related errors (status code is 422).{{/ if }}
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   */
  async {{ operation.name }}({{# unless operation.isStatic }}owner: {{ classDataName relation.target "Stored" }}{{/ unless }}{{# if operation.input }}{{# unless operation.isStatic }}, {{/ unless }}target:{{ classDataName operation.input.target  "" }}{{/ if }}): Promise<JudoRestResponse<{{# if operation.output }}{{ classDataName operation.output.target "Stored" }}{{ else }}void{{/ if }}>> {
    const path = '{{ operationRestPath relation.target operation '' }}';
    {{# if operation.input }}
    const input = target ? this.{{ firstToLower (classDataName operation.input.target "Serializer") }}.serialize(target, true) : null;
    {{/ if }}
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path){{# if operation.input }}, input{{ else }}, undefined{{/ if }}{{# unless operation.isStatic }}, {
      headers: {
        [X_JUDO_SIGNED_IDENTIFIER]: owner.__signedIdentifier!,
      },
    } {{/ unless }});
    {{# if operation.output }}
    return {
      ...rest,
      data: data ? this.{{ firstToLower (classDataName operation.output.target "StoredSerializer") }}.deserialize(data) : data,
    };
    {{ else }}
    return { data, ...rest };
    {{/ if }}
  }

  {{# if operation.input }}
  {{# if operation.input.target.isTemplateable }}
  async getTemplateOn{{ firstToUpper operation.name }}(): Promise<JudoRestResponse<{{ classDataName operation.input.target "" }}>> {
    const path = '{{ restPath operation.input.target "/~template" "" "" }}';
    const { data, ...rest } = await this.axios.get(this.getPathForActor(path));
    return {
      ...rest,
      data: this.{{ firstToLower (classDataName operation.input.target "Serializer") }}.deserialize(data),
    };
  }
  {{/ if }}
  {{/ if }}

  {{# if operation.isInputRangeable }}
  {{# neq relation.name targetRelation.name }}
  /**
   * From: relation.target.operations operation.isInputRangeable
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   */
  async getRangeOn{{ firstToUpper operation.name }}({{# unless operation.isStatic }}owner: {{ classDataName relation.target "Stored" }}, {{/ unless }}queryCustomizer?:{{ classDataName operation.input.target "QueryCustomizer" }}, headers?: Record<string, string>): Promise<JudoRestResponse<Array<{{ classDataName operation.input.target "Stored" }}>>> {
    const path = '{{ operationRestPath relation.target operation '/~range' }}';
    {{# unless operation.isStatic }}
    const input = this.{{ firstToLower (classDataName relation.target "StoredSerializer") }}.serialize(owner, true);
    {{/ unless }}
    const { data, ...rest } = await this.axios.post(this.getPathForActor(path), {
      {{# unless operation.isStatic }}owner: input,{{/ unless }}
      queryCustomizer: serialize{{ classDataName operation.input.target "QueryCustomizer" }}(queryCustomizer) ?? {},
    }, headers ? { headers } : undefined);
    return {
      ...rest,
      data: Array.isArray(data) ? data.map(d => this.{{ firstToLower (classDataName operation.input.target "StoredSerializer") }}.deserialize(d)) : [],
    };
  }
  {{/ neq }}
  {{/ if }}
{{/ each }}
}
