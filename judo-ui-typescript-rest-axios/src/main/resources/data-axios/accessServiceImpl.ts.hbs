{{> fragment.header.hbs }}

import type { AxiosResponse } from 'axios';
import type { JudoDownloadFile, JudoMetaData, JudoToken } from '../data-api/common';
import type { AccessService } from '../data-service';
import { JudoAxiosService } from './JudoAxiosService';
import type { JudoRestResponse } from '../data-api/rest/requestResponse';
{{# each (accessJoinedImportTokens application) as |imp| }}
import type { {{ imp }}, {{ imp }}Stored } from '../data-api/model/{{ imp }}';
{{/ each }}

export class AccessServiceImpl extends JudoAxiosService implements AccessService {
{{# if application.principal }}
  /**
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   * @return {Promise<{{ classDataName application.principal "" }}>}
   */
  async getPrincipal(): Promise<JudoRestResponse<{{ classDataName application.principal "Stored" }}>> {
    return this.axios.get(this.getPathForActor('{{ rootPathForApp application }}/~principal'));
  }
{{/ if }}

  /**
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   * @return {Promise<JudoMetaData>}
   */
  async getMetaData(): Promise<JudoRestResponse<JudoMetaData>> {
    return this.axios.get(this.getPathForActor('{{ rootPathForApp application }}/~meta'));
  }

  /**
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 400, 401, 403.
   * @return {Promise<string>}
   */
  async uploadFile(attributePath: string, file: File): Promise<any> {
    const responseToken: any = await this.axios.post(this.getPathForActor(attributePath + '/~upload-token'));

    if (!responseToken) {
      throw new Error(`Could not upload file, could not obtain Upload Token!`);
    }

    const formData = new FormData();
    formData.append(file.name, file);

    const response = await this.axios.post(this.axiosProvider.getFilePath('upload'), formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
        'X-Token': responseToken.data.token,
      },
    });

    if (response.status === 200) {
      return response;
    } else {
      throw new Error(`Unexpected upload response: ${response.status}\n${response}`);
    }
  }

  /**
   * @throws {AxiosError} With data containing {@link Array<FeedbackItem>} for status codes: 401, 403.
   * @return {Promise<JudoDownloadFile>}
   */
  async downloadFile(downloadToken: string, disposition: 'inline' | 'attachment'): Promise<any> {
    const response = await this.axios.get(`${this.axiosProvider.getFilePath('download')}?disposition=${disposition}`, {
      responseType: 'blob',
      headers: {
        'X-Token': downloadToken,
      },
    });
    return response;
  }
  {{# each (getAccessRelationsTypes application) as |relation| }}
  {{# if relation.isListable }}
  {{# if relation.isCollection }}
  /**
   * @return {Promise<{{ classDataName relation.target "Stored" }} | undefined>}
   */
  async findInstanceOf{{ firstToUpper relation.name }}(identifier: string, mask?: string): Promise<{{ classDataName relation.target "Stored" }} | undefined> {
    try {
      const path = '{{ restPath (getRelationOwnerAsClassType relation) "/"  relation.name "/~list" }}';
      const response = await this.axios.post(this.getPathForActor(path), {
        _identifier: identifier,
        _mask: mask,
        _seek: {
          limit: 1,
        },
      });
      if (Array.isArray(response.data) && response.data.length === 1) {
        return response.data[0];
      }
      return undefined;
    } catch(error) {
      return undefined;
    }
  }
  {{/ if }}
  {{/ if }}
  {{/ each }}
}
