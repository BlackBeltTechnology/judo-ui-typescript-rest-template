{{> fragment.header.hbs }}

import type { JudoStored, Serializer, SerializerUtil } from '../common';
import { applyStoredMembers } from '../common/utils';
import type { {{ classDataName classType '' }}, {{ classDataName classType 'Stored' }} } from '../model/{{ classDataName classType '' }}';
{{# each (getRelatedClasses classType) as |classType| }}
  import { {{ classDataName classType 'Serializer' }} } from './{{ classDataName classType 'Serializer' }}';
{{/ each }}
import { serializerUtil } from './serialization';

export class {{ classDataName classType 'Stored' }}Serializer implements Serializer<{{ classDataName classType 'Stored' }}> {
  private readonly normalSerializer: {{ classDataName classType 'Serializer' }};

  static _instance: {{ classDataName classType 'Stored' }}Serializer;

  static getInstance() : {{ classDataName classType 'Stored' }}Serializer {
    if (!{{ classDataName classType 'Stored' }}Serializer._instance) {
      {{ classDataName classType 'Stored' }}Serializer._instance = new {{ classDataName classType 'Stored' }}Serializer();
    }
    return {{ classDataName classType 'Stored' }}Serializer._instance;
  }

  constructor() {
    this.normalSerializer = new {{ classDataName classType 'Serializer' }}();
  }

  serialize(instance: {{ classDataName classType 'Stored' }}, cleanup = false): any {
    return this.normalSerializer.serialize(instance, cleanup);
  }

  deserialize(data: any = {}): {{ classDataName classType 'Stored' }} {
    return this.normalSerializer.deserialize(data) as {{ classDataName classType 'Stored' }};
  }
}

export class {{ classDataName classType 'Serializer' }} implements Serializer<{{ classDataName classType '' }}> {
  {{# each classType.relations as |relation| }}
  private {{ relation.name }}Serializer?: {{ classDataName relation.target 'Serializer' }};
  {{/ each }}

  static _instance: {{ classDataName classType '' }}Serializer;

  static getInstance(): {{ classDataName classType '' }}Serializer {
    if (!{{ classDataName classType '' }}Serializer._instance) {
      {{ classDataName classType '' }}Serializer._instance = new {{ classDataName classType '' }}Serializer();
    }
    return {{ classDataName classType '' }}Serializer._instance;
  }

  serialize(instance: {{ classDataName classType '' }}, cleanup = false): any {
    const result: any = {};
    {{# each classType.attributes as |attribute| }}
    if (instance.{{ attribute.name }} !== undefined{{# if attribute.isReadOnly }} && !cleanup{{/ if }}) {
      result.{{ attribute.name }} = {{# unless attribute.isRequired }}instance.{{ attribute.name }} === null ? null : {{/ unless }}{{ serializePrimitiveInstance attribute }};
    }
    {{/ each }}
    {{# each classType.relations as |relation| }}
      {{# if relation.isCollection }}
      if (Array.isArray(instance.{{ relation.name }}){{# if relation.isReadOnly }} && !cleanup{{/ if }}) {
        result.{{ relation.name }} = instance.{{ relation.name }}.map(r => {{ classDataName relation.target 'Serializer' }}.getInstance().serialize(r, cleanup));
      }
      {{ else }}
      if (instance.{{ relation.name }} !== undefined{{# if relation.isReadOnly }} && !cleanup{{/ if }}) {
        result.{{ relation.name }} = {{# if relation.isOptional }}instance.{{ relation.name }} === null ? null : {{/ if }}{{ classDataName relation.target 'Serializer' }}.getInstance().serialize(instance.{{ relation.name }}, cleanup);
      }
      {{/ if }}
    {{/ each }}
    applyStoredMembers(result, instance as unknown as JudoStored<any>, true);
    return result;
  }

  deserialize(instance: any = {}): {{ classDataName classType '' }} {
    const result: any = {};
    {{# each classType.attributes as |attribute| }}
    if (instance.{{ attribute.name }} !== undefined) {
      result.{{ attribute.name }} = {{# unless attribute.isRequired }}instance.{{ attribute.name }} === null ? null : {{/ unless }}{{ deserializePrimitive attribute }};
    }
    {{/ each }}
    {{# each classType.relations as |relation| }}
      {{# if relation.isCollection }}
      if (Array.isArray(instance.{{ relation.name }})) {
        result.{{ relation.name }} = instance.{{ relation.name }}.map((r: any) => {{ classDataName relation.target 'Serializer' }}.getInstance().deserialize(r));
      }
      {{ else }}
      if (instance.{{ relation.name }} !== undefined) {
        result.{{ relation.name }} = {{# if relation.isOptional }}instance.{{ relation.name }} === null ? null : {{/ if }}{{ classDataName relation.target 'Serializer' }}.getInstance().deserialize(instance.{{ relation.name }});
      }
      {{/ if }}
    {{/ each }}
    applyStoredMembers(result, instance as unknown as JudoStored<any>);
    return result as {{ classDataName classType '' }};
  }
}
