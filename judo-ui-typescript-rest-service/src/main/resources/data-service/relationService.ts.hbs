{{> fragment.header.hbs }}

import type { JudoIdentifiable } from '@judo/data-api-common';
import { {{ joinedTokensForApiImport relation }} } from '../data-api';

/**
* Relation Service for {{ classDataName (getRelationOwnerAsClassType relation) "" }}.{{ relation.name }}
*/
export interface {{ serviceRelationName relation }} {
{{# if relation.isListable }}
    {{# if (relationIsCollection relation) }}
        list{{ firstToUpper relation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, queryCustomizer?: {{ classDataName relation.target "QueryCustomizer" }}): Promise<Array<{{ classDataName relation.target "Stored" }}>>;
    {{ else }}
        get{{ firstToUpper relation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, mask?: string): Promise<{{ classDataName  relation.target "Stored" }}>;
    {{/ if }}
{{/ if }}

{{# if relation.isCreatable }}
    create{{ firstToUpper relation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, target: {{ classDataName relation.target "" }}): Promise<{{ classDataName relation.target "Stored" }}>;
{{/ if }}

{{# if relation.isDeletable }}
    delete{{ firstToUpper relation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, target: JudoIdentifiable<{{ classDataName relation.target "" }}>): Promise<void>;
{{/ if }}

{{# if relation.isUpdatable }}
    update{{ firstToUpper relation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, target: Partial<{{ classDataName relation.target "Stored" }}>): Promise<{{ classDataName relation.target "Stored" }}>;
{{/ if }}

{{# each relation.target.relations as | targetRelation | }}
    {{# if targetRelation.isRangeable }}
        getRangeFor{{ firstToUpper targetRelation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, queryCustomizer: {{ classDataName targetRelation.target "QueryCustomizer" }}): Promise<Array<{{ classDataName targetRelation.target "Stored" }}>>;
    {{/ if }}

    {{# if targetRelation.isSetable }}
        set{{ firstToUpper targetRelation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, target: JudoIdentifiable<{{ classDataName targetRelation.target "" }}>, selected: {{# if (relationIsCollection targetRelation) }}Array<{{/ if }}JudoIdentifiable<{{ classDataName targetRelation.target "" }}>{{# if (relationIsCollection targetRelation) }}>{{/ if }}): Promise<void>;
    {{/ if }}

    {{# if targetRelation.isUnsetable }}
        unset{{ firstToUpper targetRelation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, target: JudoIdentifiable<{{ classDataName targetRelation.target "" }}>): Promise<void>;
    {{/ if }}

    {{# if targetRelation.isAddable }}
        add{{ firstToUpper relation.name }}{{ firstToUpper targetRelation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, target: JudoIdentifiable<{{ classDataName targetRelation.target "" }}>, selected: Array<JudoIdentifiable<{{ classDataName targetRelation.target "" }}>>): Promise<void>;
    {{/ if }}

    {{# if targetRelation.isRemovable }}
        remove{{ firstToUpper relation.name }}{{ firstToUpper targetRelation.name }}(owner: JudoIdentifiable<{{ classDataName (getRelationOwnerAsClassType relation) "" }}>, target: JudoIdentifiable<{{ classDataName targetRelation.target "" }}>, selected: Array<JudoIdentifiable<{{ classDataName targetRelation.target "" }}>>): Promise<void>;
    {{/ if }}
{{/ each}}
}
